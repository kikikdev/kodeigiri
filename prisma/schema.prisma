generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                Int          @id @default(autoincrement())
  event_name        String       @db.VarChar(255)
  event_date        String       @db.VarChar(255)
  event_time        String       @db.VarChar(255)
  event_location    String       @db.VarChar(255)
  event_image       String       @db.Text
}

model User {
  id            Int           @id @default(autoincrement())
  fullname      String?       @default("") @db.VarChar(255)
  email         String?       @unique() @default("") @db.VarChar(255)
  password      String?       @default("") @db.VarChar(100)
  company       String?       @default("") @db.VarChar(255)
  department    String?       @default("") @db.VarChar(255)
  isLoggedIn    Boolean?      @default(false)
  lastDateLogin DateTime?     @db.Timestamp(0)
  isActive      user_isActive? @default(active)
  createdAt     DateTime?     @default(now()) @db.Timestamp(0)
  createdBy     String?       @default("system") @db.VarChar(100)
  updatedAt     DateTime?     @default(now()) @db.Timestamp(0)
  updatedBy     String?       @default("system") @db.VarChar(100)
  UserHasRoles  UserHasRoles?
}

model UserHasRoles {
  email      String    @unique(map: "email") @default("") @db.VarChar(255)
  roleCode   String    @default("") @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  created_by String?   @default("system") @db.VarChar(100)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  updated_by String?   @default("system") @db.VarChar(100)
  UserRole   UserRole  @relation(fields: [roleCode], references: [roleCode], onDelete: Cascade, map: "UserHasRoles")
  User       User      @relation(fields: [email], references: [email], onDelete: Cascade, map: "User")

  @@id([email, roleCode])
}

model UserPermission {
  permissionCode        String               @id @default("") @db.VarChar(40)
  permissionDescription String?              @default("") @db.VarChar(100)
  permissionGroups      String?              @default("") @db.VarChar(20)
  created_at            DateTime?            @default(now()) @db.Timestamp(0)
  created_by            String?              @default("system") @db.VarChar(100)
  updated_at            DateTime?            @default(now()) @db.Timestamp(0)
  updated_by            String?              @default("system") @db.VarChar(100)
  UserRolePermission    UserRolePermission[]
}

model UserRole {
  roleCode           String               @id @default("") @db.VarChar(20)
  roleName           String?              @default("") @db.VarChar(100)
  createdAt          DateTime?            @default(now()) @db.Timestamp(0)
  createdBy          String?              @default("system") @db.VarChar(100)
  updatedAt          DateTime?            @default(now()) @db.Timestamp(0)
  updatedBy          String?              @default("system") @db.VarChar(100)
  UserHasRoles       UserHasRoles[]
  UserRolePermission UserRolePermission[]
}

model UserRolePermission {
  roleCode       String         @default("") @db.VarChar(20)
  permissionCode String         @default("") @db.VarChar(40)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  created_by     String?        @default("system") @db.VarChar(100)
  updated_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_by     String?        @default("system") @db.VarChar(100)
  UserPermission UserPermission @relation(fields: [permissionCode], references: [permissionCode], onDelete: Cascade, map: "UserPermission")
  UserRole       UserRole       @relation(fields: [roleCode], references: [roleCode], onDelete: Cascade, map: "UserRole")

  @@id([roleCode, permissionCode])
}

model KeyValueStore {
  key       String    @id @default("") @db.VarChar(100)
  value     Json?
  expiredAt DateTime? @default(now()) @db.Timestamp(0)
}

enum user_isActive {
  active
  inactive
}